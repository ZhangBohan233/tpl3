struct Node {
    var num: int;
    var ptr: *Node;
}

fn fib(n: int) int {
    if n < 2 {
        return n;
    } else {
        return fib(n - 1) + fib(n - 2);
    }
}

fn main() int {
    const t0: int = clock();

    var fib_res: int = fib(20);

    const t1: int = clock();
    printf("Fib result: %d, time: %d", fib_res, t1 - t0);

    var h: *Node = malloc(sizeof(Node));
    var x: *Node = h;

    const ava: int = heap_ava();

    for var i: int = 0; i < 1000; i += 1 {
        var y: *Node = malloc(sizeof(Node));
        (*x).num = i;
        (*x).ptr = y;
        x = y;
    }

    const ava1: int = heap_ava();

    var z: *Node = h;
    var y: *Node;
    while z != null {
        y = (*z).ptr;
        //printf("%d", (*z).num);
        free(z);
        z = y;
    }

    const ava2: int = heap_ava();

    const t2: int = clock();
    printf("Time: %d, min memory available: %d, leak memory: %d", t2 - t1, ava1, ava2 - ava);
    memory_ava();
    return 0;
}